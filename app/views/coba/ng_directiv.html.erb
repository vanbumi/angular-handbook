<h1>AngularJS Directives</h1>

<ul>
  <li>AngularJS lets you extend HTML with new attributes called Directives.</li>

<li>AngularJS has a set of built-in directives which offers functionality to your applications.</li>

<li>AngularJS also lets you define your own directives.</li>
</ul>

AngularJS Directives

AngularJS directives are extended HTML attributes with the prefix ng-.

The ng-app directive initializes an AngularJS application.

The ng-init directive initializes application data.

The ng-model directive binds the value of HTML controls (input, select, textarea) to application data.

Read about all AngularJS directives in our AngularJS directive reference.

<h3>Repeating</h3>

<div ng-app="" ng-init="names=[
  {name:'Juni', city:'Tegal', status:'Janda'},
  {name:'Juli', city:'Cilacap', status:'Perawan' },
  {name:'Ngatini', city:'Praketa', status:'Diragukan' }];
  quantity=1; price=5
  ">

  <ul>
    <li ng-repeat="x in names">
      {{ 'Nama: ' + x.name +', '+'Kota: '+ x.city +', '+'Satus: '+ x.status }}
    </li>
  </ul>

  <h3>Data Binding</h3>

  <input type="number" ng-model="quantity" >
  <input type="number" ng-model="price" >
  <p>Total $: {{ quantity * price }}</p>

</div>

<p style="background:#71f296; color:#000;">AngularJS is perfect for database CRUD (Create Read Update Delete) applications.
Just imagine if these objects were records from a database.</p>

<h3>The ng-model Directive</h3>

The ng-model directive binds the value of HTML controls (input, select, textarea) to application data.

The ng-model directive can also:

Provide type validation for application data (number, email, required).
Provide status for application data (invalid, dirty, touched, error).
Provide CSS classes for HTML elements.
Bind HTML elements to HTML forms.
Read more about the ng-model directive in the next chapter.
<br><br>

<a href="/coba-ng/ng-model">Try ng-model Directive</a>
<br><br>
